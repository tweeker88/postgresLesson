***LESSON 1***
1) \set PROMPT1 '%n:%~%R%#' - устанавливает переменную для отображение user:db(~)
2) \t - отключает вывод имён столбцов и результирующей строки с количеством выбранных записей.
3) \a - выравнивание таблиц
4) \o - вывод результатов в файл/на экран
5) \gset - запись вывода в переменную
6) \dt - вывод таблиц всех схем
7) \dnS - вывод списка всех схем и их создателей
8) \db - вывод табличных пространств
9) \d - вывод описание таблицы
10) \x - вывод списка всех подготовленных операций в представлении
***LESSON 2***
SELECT * FROM pg_file_settings - показывает содержимое конфига, реальные значения могут отличаться

SELECT setting FROM pg_settings - показывает значения всех параметров
name, setting, unit - название и значение
boot_val - значение по умолчанию
reset_val - если параметр был изменен во время сеанса, то командой RESET можно восстановить это значение
source - источник текущего значения параметра
pending_restart - значение в файле конфига, для применения требуется перезапуск сервера
context - действие, необходимое для применения параметра

SELECT pg_reload_conf() - перечитать конфиг

ALTER SYSTEM SET - устанавливает параметр в конфиг файл postgresql.auto.conf
ALTER SYSTEM RESET - удаляет параметр в конфиг файл postgresql.auto.conf

SHOW - показывает значение параметра
SET - установка параметров во время сеанта

current_setting(name) - вывод значения параметра

***LESSON 3***
Транзакции работаю со снимками.
Read committed является уровнем изоляции по умолчанию в
PostgreSQL. На этом уровне снимок данных строится в начале
выполнения каждого оператора SQL. Таким образом, оператор
работает с неизменной и согласованной картиной данных, но два
одинаковых запроса, следующих один за другим, могут показать
разные данные.
Repeatable read снимок строится в начале транзакции (при
выполнении первого оператора) — поэтому все запросы в одной
транзакции видят одни и те же данные. Этот уровень удобен,
например, для отчетов, состоящих из нескольких запросов.
Serializable гарантирует полную изоляцию: можно писать
операторы так, как будто транзакция работает одна. Плата за
удобство — определенная доля транзакций завершается

Во всех строках есть доп. скрытые столбцы:
xmin - код транзакции, добавившей строку этой версии
xmax - код транзацкии, удалившей строку этой версии\

***LESSON 4***
Журнал предзаписи - попадает запись при изменении в БД,данные записываются не физ. на диск, а в буфер, для восстановления согласованности данных.
pg_wal - содержит журналы предзаписи для восстановления

***LESSON 5***
SELECT datname FROM pg_database; (\l) - вывод БД кластера
postgres - инициализируется при первом запуске СУБД
template1 - шаблон, из которого создаются последующие БД
template0 - шаблон, из которого создаются чистые БД(никогда меняется)

\set ECHO_HIDDEN on - установка константы на просмотр запросов, которые выполняют команды

SELECT nspname FROM pg_namespace; - вывод списка схем

CREATE SCHEMA special - создания новой схемы

SHOW search_path - показывает для каких схем будут выполняться запросы
$user - схема с тем же именем, что и им тек.пользователя

SELECT current_schemas(true) - явно показывает какие схемы будут задействованы

ALTER TABLE t SET SCHEMA special - перемещение таблицы в другую схему

***LESSON 6***
SELECT spcname FROM pg_tablespace - просмотр табличных пространств
CREATE TABLESPACE ts LOCATION '/path/' - создание табличного пространства
CREATE DATABASE test TABLESPACE ts - указываем табличное пространство по умолчанию при создании БД
SELECT pg_relation_filepath('name') - показывает расположение файлов, относящихся к объекту

***LESSON 7***
CREATE DATABASE bookstore - создание БД bookstore
CREATE SCHEMA bookstore - создание схемы bookstore
SET search_path = bookstore, public - установка пути поиска
CREATE TABLE books(book_id SERIAL PRIMARY KEY, title TEXT) - создание таблицы books
CREATE TABLE authors(
    author_id SERIAL PRIMARY KEY,
    last_name text,
    first_name text,
    middle_name text
) - создание таблицы авторов
CREATE TABLE authorship
(
    book_id   integer REFERENCES books,
    author_id integer REFERENCES authors,
    seq_num   integer,
    PRIMARY KEY (book_id,author_id)
) - создание таблицы авторство
CREATE TABLE operations(
    operation_id SERIAL PRIMARY KEY,
    book_id INTEGER NOT NULL REFERENCES books,
    qty_change INTEGER,
    date_created DATE DEFAULT now()
) - создание таблицы с операциями

INSERT INTO authors(last_name, first_name, middle_name)
VALUES ('Николаевич', 'Толстой', 'Лев');
INSERT INTO authors(last_name, first_name, middle_name)
VALUES ('Сергеевич', 'Пушки', 'Александр');
INSERT INTO authors(last_name, first_name, middle_name)
VALUES ('Юрьевич', 'Лермонтов', 'Михаил');

INSERT INTO books(title)
VALUES ('Живой труп');
INSERT INTO books(title)
VALUES ('Евгений Онегин');
INSERT INTO books(title)
VALUES ('Маскарад');

INSERT INTO authorship(book_id, author_id, seq_num)
VALUES (1, 1, 1);
INSERT INTO authorship(book_id, author_id, seq_num)
VALUES (2, 2, 1);
INSERT INTO authorship(book_id, author_id, seq_num)
VALUES (3, 3, 1);

INSERT INTO operations(book_id, qty_change) VALUES (1, 10);
INSERT INTO operations(book_id, qty_change) VALUES (2, 0);
INSERT INTO operations(book_id, qty_change) VALUES (3, -7);

***LESSON 8***
PREPARE name_func(text) AS SELECT * FROM authors WHERE last_name = $1 - подготовленная операция
DECLARE name_cursor CURSOR FOR SELECT * FROM authors - объявления курсора
FETCH name_cursor - получение данных построчно
FETCH 2 name_cursor - указываем размер выборки
CLOSE name_cursor - закрытие курсора

CREATE VIEW authors_v AS
SELECT a.author_id,
       a.first_name || ' ' ||
       a.last_name ||
       coalesce(' ' || nullif(a.middle_name, ''), '') AS display_name
FROM authors a - создание представление для выборки авторов

CREATE VIEW catalog_v AS
SELECT b.book_id,
       b.title AS display_name
FROM books b - создание представление для каталога книг

CREATE VIEW operations_v AS
SELECT book_id,
       CASE WHEN qty_change > 0 THEN 'Поступление' ELSE 'Покупка' END op_type,
       abs(qty_change)                                                qty_change,
       to_char(date_created, 'DD.MM.YYYY')                            date_created
FROM operations
ORDER BY operation_id - создание представления для операций над книгами